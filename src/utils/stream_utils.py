import os
import time
import datetime
import pandas as pd

from database import *


def clean_eeg_dataframe(
    data_df,
    montage=ELECTRODE_MONTAGE_DEFAULT,
) -> pd.DataFrame:
    """
    Apply renaming to panda DataFrame `data_df`, timestamp-ify timestamps, and remove unnecessary columns.

    Arg:
        data_df: a pandas dataframe read directly from an OpenBCI recording file.
    """
    rename_mapping = {
        f" EXG Channel {x}": f"channel_{x}_{montage[x]['name']}" for x in range(NUM_CHANNELS)
    }
    rename_mapping.update({
        " Timestamp (Formatted)": "timestamp",
        "Sample Index": "index",
    }) # keeping only the formatted timestamp and discard the raw timestamp
    data_df.rename(columns=rename_mapping, inplace=True)

    data_df["timestamp"] = pd.to_datetime(data_df["timestamp"].str.strip()) # convert to datetime object

    data_df = data_df[[col for col in data_df.columns.values if col.startswith("channel")] + ["timestamp", "index"]] # extract only 10 channels of interest

    return data_df


def mock_stream(
    txt_path: str,
    period: int = 1,
):
    """
    Mock brainflow data stream.
    Implementation: yield data for every `period`

    Arg:
        path: path to the file that contains the recorded streaming data. The file should have suffix `txt` and should be generated by openBCI device directly
        period: the time interval between each data point
    """
    assert txt_path.endswith(".txt") and os.path.exists(txt_path)
    data_df = pd.read_csv(txt_path, skiprows=NUM_ROWS_TO_SKIP)
    data_df = clean_eeg_dataframe(data_df)

    bottom_line_num = data_df.shape[0]
    curr_line_num = 0
    num_line_to_read_per_period = SAMPLE_RATE * period

    while (curr_line_num + num_line_to_read_per_period < bottom_line_num):
        time.sleep(period)
        yield data_df.iloc[curr_line_num: curr_line_num + num_line_to_read_per_period]
        curr_line_num += num_line_to_read_per_period

for i in mock_stream():
    print(i)